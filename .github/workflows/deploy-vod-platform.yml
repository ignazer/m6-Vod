# Pipeline CI/CD para Plataforma VOD - DEMOSTRACIÓN
# Archivo: .github/workflows/vod-platform-cicd.yml
# 
# Este pipeline demuestra un flujo completo de CI/CD para una plataforma de Video On Demand
# incluyendo: testing, security scanning, build de imágenes Docker, y deployment a Kubernetes
# con estrategia Blue-Green para producción.
#
# NOTA: Este es un pipeline de demostración educativa

name: VOD Platform CI/CD Pipeline (Demo)

on:
  push:
    branches: 
      - main
      - develop
      - 'release/*'
    paths-ignore:
      - 'docs/**'
      - '*.md'
  pull_request:
    branches: 
      - main
      - develop
    types: [opened, synchronize, reopened]
  
  # Despliegue manual cuando sea necesario
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
        - development
        - staging
        - production

env:
  AWS_REGION: us-east-1
  EKS_CLUSTER_NAME: vod-production
  ECR_REPOSITORY: vod-platform
  KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}  # Configurar en GitHub Secrets para uso real

# Definir concurrencia para evitar despliegues simultáneos
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Análisis estático y linting
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Análisis completo del historial para SonarQube

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --only=production

    - name: Run ESLint
      run: |
        npm run lint
        # Generar reporte en formato JSON para análisis posterior
        npm run lint:json > eslint-report.json
      continue-on-error: true

    - name: Run Prettier check
      run: npm run prettier:check

    - name: Setup Python for backend services
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black mypy pytest

    - name: Python linting
      run: |
        # Verificar formato de código
        black --check .
        # Análisis estático
        flake8 . --config=.flake8
        # Type checking
        mypy src/

    - name: SonarQube Scan
      uses: sonarqube-quality-gate-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  # Tests unitarios y de integración
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    # Matriz para probar múltiples versiones de Node.js
    strategy:
      matrix:
        node-version: [18, 20]
    
    services:
      # Base de datos para tests de integración
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: vod_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      # Redis para tests de cache
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run unit tests
      run: |
        # Tests unitarios con coverage
        npm run test:unit -- --coverage --reporters=default --reporters=jest-junit
        # Generar reporte de cobertura en formato lcov
        npm run test:coverage
      env:
        # Variables de entorno para tests
        DATABASE_URL: postgres://postgres:test_password@localhost:5432/vod_test
        REDIS_URL: redis://localhost:6379
        NODE_ENV: test

    - name: Run integration tests
      run: |
        # Esperar que los servicios estén listos
        npm run test:integration
      env:
        DATABASE_URL: postgres://postgres:test_password@localhost:5432/vod_test
        REDIS_URL: redis://localhost:6379

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()  # Subir incluso si los tests fallan
      with:
        name: test-results-${{ matrix.node-version }}
        path: |
          coverage/
          test-results.xml
        retention-days: 30

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-${{ matrix.node-version }}

  # Build de imágenes Docker
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
      registry: ${{ steps.login-ecr.outputs.registry }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
        tags: |
          # Tag con SHA del commit para trazabilidad
          type=sha,prefix={{branch}}-
          # Tag con nombre de rama
          type=ref,event=branch
          # Tag latest solo para rama main
          type=raw,value=latest,enable={{is_default_branch}}
          # Tag con número de PR para pull requests
          type=ref,event=pr,prefix=pr-

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64  # Multi-arch para compatibilidad
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        # Cache para acelerar builds
        cache-from: type=gha
        cache-to: type=gha,mode=max
        # Build args para información del build
        build-args: |
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

  # Escaneo de seguridad de imágenes
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Scan image with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: ECR Image Scanning
      run: |
        # Iniciar escaneo en ECR
        aws ecr start-image-scan \
          --repository-name ${{ env.ECR_REPOSITORY }} \
          --image-id imageTag=${{ github.sha }}
        
        # Esperar resultado del escaneo
        aws ecr wait image-scan-complete \
          --repository-name ${{ env.ECR_REPOSITORY }} \
          --image-id imageTag=${{ github.sha }}
        
        # Obtener resultados
        aws ecr describe-image-scan-findings \
          --repository-name ${{ env.ECR_REPOSITORY }} \
          --image-id imageTag=${{ github.sha }} \
          --output table

  # Despliegue a Development
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/develop'
    # environment: development  # Comentado para demo - crear en GitHub Settings si se usa realmente
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.2'

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.12.0'

    - name: Deploy to Development
      run: |
        # Actualizar values específicos para desarrollo
        helm upgrade --install vod-platform ./helm/vod-platform \
          --namespace development \
          --create-namespace \
          --set image.repository=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }} \
          --set image.tag=${{ github.sha }} \
          --set environment=development \
          --set replicaCount=1 \
          --set resources.requests.cpu=100m \
          --set resources.requests.memory=256Mi \
          --values ./helm/vod-platform/values-development.yaml \
          --timeout 10m \
          --wait

    - name: Verify deployment
      run: |
        # Verificar que los pods estén ejecutándose
        kubectl get pods -n development -l app.kubernetes.io/name=vod-platform
        kubectl wait --for=condition=ready pod -n development -l app.kubernetes.io/name=vod-platform --timeout=300s

    - name: Run smoke tests
      run: |
        # Obtener URL del servicio
        SERVICE_URL=$(kubectl get service vod-platform -n development -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        
        # Tests básicos de health check
        curl -f http://$SERVICE_URL/health || exit 1
        curl -f http://$SERVICE_URL/ready || exit 1

  # Despliegue a Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    # environment: staging  # Comentado para demo - crear en GitHub Settings si se usa realmente
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.2'

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.12.0'

    - name: Deploy to Staging
      run: |
        helm upgrade --install vod-platform ./helm/vod-platform \
          --namespace staging \
          --create-namespace \
          --set image.repository=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }} \
          --set image.tag=${{ github.sha }} \
          --set environment=staging \
          --set replicaCount=3 \
          --set resources.requests.cpu=500m \
          --set resources.requests.memory=1Gi \
          --values ./helm/vod-platform/values-staging.yaml \
          --timeout 15m \
          --wait

    - name: Run integration tests in staging
      run: |
        # Tests más completos en staging
        npm run test:e2e:staging
      env:
        STAGING_URL: ${{ secrets.STAGING_URL }}
        TEST_API_KEY: ${{ secrets.TEST_API_KEY }}

    - name: Performance tests
      uses: grafana/k6-action@v0.3.0
      with:
        filename: tests/performance/load-test.js
      env:
        K6_CLOUD_TOKEN: ${{ secrets.K6_CLOUD_TOKEN }}

  # Despliegue a Production (requiere aprobación manual)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security-scan, deploy-staging]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    # environment: 
    #   name: production  # Comentado para demo - crear en GitHub Settings si se usa realmente
    #   url: https://vod.company.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.2'

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.12.0'

    - name: Blue-Green Deployment Setup
      run: |
        # Determinar color actual
        CURRENT_COLOR=$(kubectl get service vod-platform-active -o jsonpath='{.spec.selector.color}' 2>/dev/null || echo "blue")
        NEW_COLOR=$(if [ "$CURRENT_COLOR" = "blue" ]; then echo "green"; else echo "blue"; fi)
        
        echo "CURRENT_COLOR=$CURRENT_COLOR" >> $GITHUB_ENV
        echo "NEW_COLOR=$NEW_COLOR" >> $GITHUB_ENV

    - name: Deploy new version (Blue-Green)
      run: |
        # Desplegar nueva versión con nuevo color
        helm upgrade --install vod-platform-${{ env.NEW_COLOR }} ./helm/vod-platform \
          --namespace production \
          --set image.repository=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }} \
          --set image.tag=${{ github.sha }} \
          --set environment=production \
          --set deployment.color=${{ env.NEW_COLOR }} \
          --set replicaCount=10 \
          --set resources.requests.cpu=1000m \
          --set resources.requests.memory=2Gi \
          --set resources.limits.cpu=2000m \
          --set resources.limits.memory=4Gi \
          --values ./helm/vod-platform/values-production.yaml \
          --timeout 20m \
          --wait

    - name: Warm-up new deployment
      run: |
        # Obtener URL del nuevo deployment
        NEW_SERVICE_URL=$(kubectl get service vod-platform-${{ env.NEW_COLOR }} -n production -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        
        # Warm-up requests para preparar la aplicación
        for i in {1..10}; do
          curl -f http://$NEW_SERVICE_URL/health
          sleep 5
        done

    - name: Run production smoke tests
      run: |
        NEW_SERVICE_URL=$(kubectl get service vod-platform-${{ env.NEW_COLOR }} -n production -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        
        # Tests críticos antes del switch
        npm run test:smoke:production -- --url=http://$NEW_SERVICE_URL
      env:
        PROD_API_KEY: ${{ secrets.PROD_API_KEY }}

    - name: Switch traffic (Blue-Green)
      run: |
        # Cambiar el selector del servicio activo
        kubectl patch service vod-platform-active -n production -p '{"spec":{"selector":{"color":"'"${{ env.NEW_COLOR }}"'"}}}'
        
        # Actualizar ingress/ALB para apuntar al nuevo servicio
        kubectl patch ingress vod-platform-ingress -n production --type='merge' -p='{"spec":{"rules":[{"host":"vod.company.com","http":{"paths":[{"path":"/","pathType":"Prefix","backend":{"service":{"name":"vod-platform-'"${{ env.NEW_COLOR }}"'","port":{"number":80}}}}]}}]}}'

    - name: Verify production deployment
      run: |
        # Verificar que el tráfico se está sirviendo correctamente
        sleep 30  # Esperar propagación DNS/ALB
        
        for i in {1..5}; do
          curl -f https://vod.company.com/health
          curl -f https://vod.company.com/api/v1/status
          sleep 10
        done

    - name: Cleanup old deployment
      run: |
        # Mantener deployment anterior por rollback rápido (opcional)
        # Escalar deployment anterior a 0 para ahorrar recursos
        kubectl scale deployment vod-platform-${{ env.CURRENT_COLOR }} -n production --replicas=0
        
        # Programar eliminación completa en 1 hora (job separado)
        echo "Old deployment ${{ env.CURRENT_COLOR }} scaled to 0. Manual cleanup required."

    - name: Create GitHub Release
      if: github.ref == 'refs/heads/main'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          ## Changes in this Release
          - Image: ${{ needs.build.outputs.image-tag }}
          - Commit: ${{ github.sha }}
          - Deployed to production: $(date)
          
          ## Deployment Details
          - Blue-Green deployment completed
          - Previous color: ${{ env.CURRENT_COLOR }}
          - New active color: ${{ env.NEW_COLOR }}
        draft: false
        prerelease: false

  # Notificaciones
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-staging, deploy-production]
    if: always()  # Ejecutar incluso si hay fallos
    
    steps:
    - name: Notify Slack on Success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#deployments'
        text: |
          :white_check_mark: VOD Platform deployment successful!
          
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
          
          Deployed to: Production
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify Slack on Failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#deployments'
        text: |
          :x: VOD Platform deployment failed!
          
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
          
          Please check the GitHub Actions logs.
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Update deployment status in monitoring
      if: always()
      run: |
        # Actualizar métricas de deployment en sistema de monitoreo
        curl -X POST "${{ secrets.MONITORING_WEBHOOK_URL }}" \
          -H "Content-Type: application/json" \
          -d '{
            "event": "deployment",
            "status": "${{ job.status }}",
            "version": "${{ github.sha }}",
            "environment": "production",
            "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"
          }'